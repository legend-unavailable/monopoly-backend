import express from 'express';
import { User } from '../models/User.js';
import { Game } from '../models/Game.js';
import { Property } from '../models/Property.js';
import mongoose from 'mongoose';
import auth from '../middleware/auth.js';

const router = express.Router();

// Create a new game room
router.post('/games', auth, async (req, res) => {
  try {
    const { name, settings } = req.body;
    const userId = req.user.id; // From auth middleware
    
    // Find the user
    const user = await User.findOne({ id: userId });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    // Create new game document
    const newGame = new Game({
      name: name || `${user.username}'s Game`,
      createdBy: user._id,
      status: 'waiting',
      settings: {
        startingMoney: settings?.startingMoney || 1500,
        freeParking: settings?.freeParking || false,
        auctionProperties: settings?.auctionProperties || true,
        maxPlayers: settings?.maxPlayers || 6,
        turnTimeLimit: settings?.turnTimeLimit || null
      },
      // Add creator as first player
      players: [{
        userId: user._id,
        username: user.username,
        token: req.body.token || 'car', // Default token
        balance: settings?.startingMoney || 1500,
        position: 0,
        turnOrder: 0
      }]
    });
    
    // Initialize properties from property definitions
    const propertyDefinitions = await Property.find({});
    newGame.properties = propertyDefinitions.map(prop => ({
      propertyId: prop.id,
      ownerId: null, // Bank-owned initially
      isMortgaged: false,
      houses: 0,
      hotels: 0
    }));

    // Save the new game
    const savedGame = await newGame.save();
    
    // Update user's activeGames
    await User.findByIdAndUpdate(user._id, {
      $push: { activeGames: savedGame._id }
    });
    
    res.status(201).json({
      message: 'Game room created successfully',
      game: {
        id: savedGame._id,
        name: savedGame.name,
        status: savedGame.status,
        players: savedGame.players.length,
        maxPlayers: savedGame.settings.maxPlayers,
        createdAt: savedGame.startTime
      }
    });
    
  } catch (error) {
    console.error('Error creating game room:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Get all available game rooms
router.get('/games', auth, async (req, res) => {
  try {
    const availableGames = await Game.find({ 
      status: 'waiting',
      'players.length': { $lt: '$settings.maxPlayers' } 
    })
    .select('name status players settings startTime createdBy')
    .populate('createdBy', 'username');
    
    res.json(availableGames);
  } catch (error) {
    console.error('Error fetching game rooms:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Join an existing game room
router.post('/games/:gameId/join', auth, async (req, res) => {
  try {
    const { gameId } = req.params;
    const { token } = req.body;
    const userId = req.user.id;
    
    // Find the user
    const user = await User.findOne({ id: userId });
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    // Find the game
    const game = await Game.findById(gameId);
    if (!game) {
      return res.status(404).json({ message: 'Game not found' });
    }
    
    // Check if game is joinable
    if (game.status !== 'waiting') {
      return res.status(400).json({ message: 'This game has already started or ended' });
    }
    
    // Check if room has space
    if (game.players.length >= game.settings.maxPlayers) {
      return res.status(400).json({ message: 'Game room is full' });
    }
    
    // Check if user is already in the game
    if (game.players.some(p => p.userId.toString() === user._id.toString())) {
      return res.status(400).json({ message: 'You are already in this game' });
    }
    
    // Check if token is already taken
    if (token && game.players.some(p => p.token === token)) {
      return res.status(400).json({ message: 'This token is already taken' });
    }
    
    // Add user to game
    const playerToken = token || ['car', 'dog', 'shoe', 'hat', 'ship', 'thimble', 'wheelbarrow', 'iron']
      .filter(t => !game.players.some(p => p.token === t))[0] || 'car';
    
    game.players.push({
      userId: user._id,
      username: user.username,
      token: playerToken,
      balance: game.settings.startingMoney,
      position: 0,
      turnOrder: game.players.length
    });
    
    await game.save();
    
    // Update user's activeGames
    await User.findByIdAndUpdate(user._id, {
      $addToSet: { activeGames: game._id }
    });
    
    res.json({
      message: 'Successfully joined game',
      game: {
        id: game._id,
        name: game.name,
        players: game.players.map(p => ({
          username: p.username,
          token: p.token
        }))
      }
    });
    
  } catch (error) {
    console.error('Error joining game room:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

// Start a game (only creator can do this)
router.post('/games/:gameId/start', auth, async (req, res) => {
  try {
    const { gameId } = req.params;
    const userId = req.user.id;
    
    // Find the game
    const game = await Game.findById(gameId);
    if (!game) {
      return res.status(404).json({ message: 'Game not found' });
    }
    
    // Check if user is the creator
    const user = await User.findOne({ id: userId });
    if (!user || game.createdBy.toString() !== user._id.toString()) {
      return res.status(403).json({ message: 'Only the game creator can start the game' });
    }
    
    // Check if game can be started
    if (game.status !== 'waiting') {
      return res.status(400).json({ message: 'Game has already started or ended' });
    }
    
    if (game.players.length < 2) {
      return res.status(400).json({ message: 'Need at least 2 players to start' });
    }
    
    // Randomly determine turn order
    const shuffledPlayers = [...game.players];
    for (let i = shuffledPlayers.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffledPlayers[i], shuffledPlayers[j]] = [shuffledPlayers[j], shuffledPlayers[i]];
    }
    
    // Update turn order
    shuffledPlayers.forEach((player, index) => {
      player.turnOrder = index;
    });
    
    // Set game to active
    game.status = 'active';
    game.currentPlayerId = shuffledPlayers[0].userId;
    game.players = shuffledPlayers;
    
    await game.save();
    
    res.json({
      message: 'Game started successfully',
      gameId: game._id,
      firstPlayer: shuffledPlayers[0].username,
      turnOrder: shuffledPlayers.map(p => p.username)
    });
    
  } catch (error) {
    console.error('Error starting game:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
});

export default router;